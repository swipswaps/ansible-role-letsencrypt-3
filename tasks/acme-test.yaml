---
# Sets up boulder test acme server
# This allows us to use ACME protocol to spoof a valid LetsEncrypt endpoint locally
# to mimic production usage of LetsEncrypt cutover scripts

- name: Install docker package
  package:
    name: "{{ le_docker_package }}"
  when: le_manage_docker

- name: Install docker-compose
  pip:
    name: 
      - docker
      - docker-compose
  when: le_manage_docker

- name: Make sure docker.service is running
  service:
    name: docker
    state: started
  when: le_manage_docker

- name: Clone boulder source
  git:
    repo: https://github.com/letsencrypt/boulder
    dest: "{{ le_testing_dir }}"
    # Version stubbed since they modify the compose file and yaml files very often.
    version: release-2019-06-28
    force: yes

- name: Override challenge ports to normal (80,443)
  copy:
    src: va.json
    dest: "{{ le_testing_dir }}/test/config/va.json"
    
- name: Override FAKEDNS to resolve to docker interface
  copy:
    src: docker-compose.yml.boulder
    dest: "{{ le_testing_dir }}/docker-compose.yml"

- name: Override rate limits for boulder server (fake acme)
  copy:
    src: rate-limit-policies.yml
    dest: "{{ le_testing_dir }}/test/rate-limit-policies.yml"

- name: Override max retries for boulder server mysql connections (fake acme)
  copy:
    src: entrypoint.sh
    dest: "{{ le_testing_dir }}/test/entrypoint.sh"

# Needed to start containers since two of them need write access.
- name: Set SELinux context
  shell: chcon -Rt container_file_t {{ le_testing_dir }}
  when: ansible_os_family == "RedHat"

- name: Start boulder server (Fake ACME Server)
  shell: > 
    PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
    docker-compose up -d
  args:
    chdir: "{{ le_testing_dir }}"
    executable: /bin/bash
